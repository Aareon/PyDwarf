raws.queryable.get
raws.queryableobj.getobj

>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> print hematite.get('METAL_ORE:GOLD:100') # Get the last token in the entire file
[METAL_ORE:GOLD:100]
>>> print hematite.get('METAL_ORE:GOLD:100', 'INORGANIC') # Stop at the next INORGANIC token
None

---

raws.queryable.last
raws.queryableobj.getobj

>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> print hematite.last('STATE_NAME_ADJ') # Get the last token in the entire file
[STATE_NAME_ADJ:ALL_SOLID:slade]
>>> print hematite.last('STATE_NAME_ADJ', 'INORGANIC') # Stop at the next INORGANIC token
[STATE_NAME_ADJ:ALL_SOLID:hematite]

---

raws.queryable.all
raws.queryableobj.getobj raws.tokenlist.__len__

>>> dwarf = df.getobj('CREATURE:DWARF')
>>> print len(dwarf.all('INTELLIGENT')) # Gets all INTELLIGENT tokens following CREATURE:DWARF, including those belonging to other creatures
6
>>> print len(dwarf.all('INTELLIGENT', 'CREATURE')) # Gets only the dwarf's INTELLIGENT token
1
>>> print len(dwarf.all('INTELLIGENT', 'CREATURE:GOBLIN'))
3

---

raws.queryable.all
raws.queryableobj.getobj

>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> print hematite.all(until='INORGANIC')
[USE_MATERIAL_TEMPLATE:STONE_TEMPLATE]
[STATE_NAME_ADJ:ALL_SOLID:hematite][DISPLAY_COLOR:4:7:0][TILE:156]
[ENVIRONMENT:SEDIMENTARY:VEIN:100]
[ENVIRONMENT:IGNEOUS_EXTRUSIVE:VEIN:100]
[ITEM_SYMBOL:'*']
[METAL_ORE:IRON:100]
[SOLID_DENSITY:5260]
[MATERIAL_VALUE:8]
[IS_STONE]
[MELTING_POINT:12736]
>>> print hematite.all(until='ENVIRONMENT')
[USE_MATERIAL_TEMPLATE:STONE_TEMPLATE]
[STATE_NAME_ADJ:ALL_SOLID:hematite][DISPLAY_COLOR:4:7:0][TILE:156]

---

raws.queryable.all
raws.queryableobj.getobj raws.tokenlist.each

>>> dwarven = df.getobj('TRANSLATION:DWARF')
>>> print dwarven.all(exact_value='T_WORD', re_arg=(0, 'AL.*'))
[T_WORD:ALE:mabdug]
[T_WORD:ALCHEMY:anzish]
[T_WORD:ALLY:astel]
[T_WORD:ALLIANCE:boshut]
[T_WORD:ALLEGIANCE:uzan]
>>> intelligence = df.all('INTELLIGENT')
>>> print intelligence.each(lambda token: token.get('CREATURE', reverse=True)) # Get the creature token most immediately preceding each intelligent token
[CREATURE:DWARF]
[CREATURE:HUMAN]
[CREATURE:ELF]
[CREATURE:GOBLIN]
[CREATURE:FAIRY]
[CREATURE:PIXIE]

---

raws.queryable.get


>>> print df.get(exact_value='TRANSLATION', exact_args=['HUMAN'])
[TRANSLATION:HUMAN]
>>> print df.get(value_in=('EXAMPLE', 'ALSO_NOT_A_REAL_TOKEN', 'PICKED_COLOR'), exact_args=['6', '0', '1'])
[PICKED_COLOR:6:0:1]
>>> bear = df.get(match_token=raws.token('CREATURE:BEAR_GRIZZLY'))
>>> print bear
[CREATURE:BEAR_GRIZZLY]
>>> print bear.get(exact_value='DESCRIPTION')
[DESCRIPTION:A huge brown creature found in temperate woodland.  It is known for its ferocious attack, usually when it or its young are threatened.]
>>> print bear.get(exact_value='CREATURE')
[CREATURE:BEAR_BLACK]

---

raws.queryable.list
raws.queryableobj.getobj raws.queryable.get
reset
>>> forest = df.getobj('ENTITY:FOREST')
>>> print forest.list(range=5, include_self=True)
[ENTITY:FOREST]
    [CREATURE:ELF]
    [TRANSLATION:ELF]
    [WEAPON:ITEM_WEAPON_SWORD_SHORT]
    [WEAPON:ITEM_WEAPON_SPEAR]
>>> sword = forest.get('WEAPON:ITEM_WEAPON_SWORD_SHORT')
>>> sword.remove()
>>> print forest.list(range=5, include_self=True)
[ENTITY:FOREST]
    [CREATURE:ELF]
    [TRANSLATION:ELF]
    [WEAPON:ITEM_WEAPON_SPEAR]
    [WEAPON:ITEM_WEAPON_BOW]

---

raws.queryable.__getitem__
raws.dir.__getitem__

>>> food = df['item_food']
>>> print food[...]
[OBJECT:ITEM]
[ITEM_FOOD:ITEM_FOOD_BISCUITS]
[NAME:biscuits]
[LEVEL:2]
[ITEM_FOOD:ITEM_FOOD_STEW]
[NAME:stew]
[LEVEL:3]
[ITEM_FOOD:ITEM_FOOD_ROAST]
[NAME:roast]
[LEVEL:4]
>>> print food[0]
[OBJECT:ITEM]
>>> print food[-1]
[LEVEL:4]
>>> print food['NAME']
[NAME:biscuits]
>>> token = raws.token('NAME:biscuits')
>>> print food[token]
[NAME:biscuits]
>>> print food[lambda token, count: (token.value == 'NAME', False)]
[NAME:biscuits]
[NAME:stew]
[NAME:roast]
>>> print food[1:4]
[ITEM_FOOD:ITEM_FOOD_BISCUITS]
[NAME:biscuits]
[LEVEL:2]
[ITEM_FOOD:ITEM_FOOD_STEW]
>>> print food[0, 'NAME']
[OBJECT:ITEM]
[NAME:biscuits]
>>> print food[0, 2:3, 'OBJECT', None]
[OBJECT:ITEM]
[NAME:biscuits]
[LEVEL:2][OBJECT:ITEM]

---

raws.queryable.__getitem__
raws.dir.__getitem__

>>> food = df['item_food']
>>> print food[raws]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "raws/queryable.py", line 43, in __getitem__
    return self.getitem(*args, **kwargs)
  File "raws/queryable.py", line 85, in getitem
    raise TypeError('Failed to get item because the argument was of an unrecognized type %s.' % type(item))
TypeError: Failed to get item because the argument was of an unrecognized type <type 'module'>.

---

raws.queryable.itokens raws.queryable.tokens raws.queryable.list
raws.dir.__getitem__ raws.tokenlist.__eq__ raws.tokengenerator.__eq__

>>> food = df['item_food']  
>>> print type(food.itokens()) # Get tokens as a generator
<type 'generator'>
>>> print type(food.tokens()) # Get tokens as a regenerator
<class 'raws.tokengenerator.tokengenerator'>
>>> print type(food.list()) # Get tokens as a list
<class 'raws.tokenlist.tokenlist'>
>>> print food.itokens() == food.tokens()
True
>>> print food.itokens() == food.list()
True
>>> print food.tokens() == food.itokens()
True
>>> print food.tokens() == food.list()
True
>>> print food.list() == food.itokens()
True
>>> print food.list() == food.tokens()
True

---

raws.queryable.itokens raws.queryable.tokens
raws.dir.__getitem__

>>> food = df['item_food']
>>> print food.itokens()
<generator object itokens at 0x100526d20>
>>> print food.tokens()
[OBJECT:ITEM]
[ITEM_FOOD:ITEM_FOOD_BISCUITS]
[NAME:biscuits]
[LEVEL:2]
[ITEM_FOOD:ITEM_FOOD_STEW]
[NAME:stew]
[LEVEL:3]
[ITEM_FOOD:ITEM_FOOD_ROAST]
[NAME:roast]
[LEVEL:4]

