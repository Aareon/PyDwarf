queryable.propdict
queryableobj.getobj
>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> props = hematite.propdict()
>>> print props.get('ENVIRONMENT')
[ENVIRONMENT:SEDIMENTARY:VEIN:100]
[ENVIRONMENT:IGNEOUS_EXTRUSIVE:VEIN:100]
>>> print props.get('IS_STONE')
[IS_STONE]
>>> print props.get('TILE:156')
[TILE:156]
>>> print props.get('NOT_A_TOKEN')
None

---

queryable.all queryable.allprop
queryableobj.getobj
>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> print len(hematite.all('ENVIRONMENT')) # Gets all ENVIRONMENT tokens following hematite
38
>>> print hematite.allprop('ENVIRONMENT') # Gets only the ENVIRONMENT tokens belonging to hematite
[ENVIRONMENT:SEDIMENTARY:VEIN:100]
[ENVIRONMENT:IGNEOUS_EXTRUSIVE:VEIN:100]

---

queryable.getlast queryable.getlastprop
queryableobj.getobj
>>> iron = df.getobj('INORGANIC:IRON')
>>> print iron.getlast(re_value='ITEMS_.+') # Gets the property of adamantite, the last ITEMS_ token in the file
[ITEMS_SOFT]
>>> print iron.getlastprop(re_value='ITEMS_.+') # Gets the last ITEMS_ token which belongs to iron
[ITEMS_SCALED]

---

queryable.get queryable.getprop
queryableobj.getobj
>>> iron = df.getobj('INORGANIC:IRON')
>>> print iron.get(exact_value='USE_MATERIAL_TEMPLATE')
[USE_MATERIAL_TEMPLATE:METAL_TEMPLATE]
>>> print iron.get('WAFERS') # Gets the WAFERS token that's a property of adamantite
[WAFERS]
>>> print iron.getprop('WAFERS') # Stops at the next INORGANIC token, doesn't pick up adamantine's WAFERS token
None

---

queryable.all queryable.alluntil
queryableobj.getobj tokenlist.__len__
>>> dwarf = df.getobj('CREATURE:DWARF')
>>> print len(dwarf.all('INTELLIGENT')) # Gets all INTELLIGENT tokens following CREATURE:DWARF, including those belonging to other creatures
6
>>> print len(dwarf.alluntil('INTELLIGENT', 'CREATURE')) # Gets only the dwarf's INTELLIGENT token
1
>>> print len(dwarf.alluntil('INTELLIGENT', 'CREATURE:GOBLIN'))
3

---

queryable.getlast queryable.getlastuntil
queryableobj.getobj
>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> print hematite.getlast('STATE_NAME_ADJ')
[STATE_NAME_ADJ:ALL_SOLID:slade]
>>> print hematite.getlastuntil('STATE_NAME_ADJ', 'INORGANIC')
[STATE_NAME_ADJ:ALL_SOLID:hematite]

---

queryable.get queryable.getuntil
queryableobj.getobj
>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> print hematite.get('METAL_ORE:GOLD:100')
[METAL_ORE:GOLD:100]
>>> print hematite.getuntil('METAL_ORE:GOLD:100', 'INORGANIC')
None

---

queryable.until
queryableobj.getobj
>>> hematite = df.getobj('INORGANIC:HEMATITE')
>>> print hematite.until('INORGANIC')
[USE_MATERIAL_TEMPLATE:STONE_TEMPLATE]
[STATE_NAME_ADJ:ALL_SOLID:hematite][DISPLAY_COLOR:4:7:0][TILE:156]
[ENVIRONMENT:SEDIMENTARY:VEIN:100]
[ENVIRONMENT:IGNEOUS_EXTRUSIVE:VEIN:100]
[ITEM_SYMBOL:'*']
[METAL_ORE:IRON:100]
[SOLID_DENSITY:5260]
[MATERIAL_VALUE:8]
[IS_STONE]
[MELTING_POINT:12736]
>>> print hematite.until('ENVIRONMENT')
[USE_MATERIAL_TEMPLATE:STONE_TEMPLATE]
[STATE_NAME_ADJ:ALL_SOLID:hematite][DISPLAY_COLOR:4:7:0][TILE:156]

---

queryable.all
queryableobj.getobj tokenlist.each
>>> dwarven = df.getobj('TRANSLATION:DWARF')
>>> print dwarven.all(exact_value='T_WORD', re_arg=(0, 'AL.*'))
[T_WORD:ALE:mabdug]
[T_WORD:ALCHEMY:anzish]
[T_WORD:ALLY:astel]
[T_WORD:ALLIANCE:boshut]
[T_WORD:ALLEGIANCE:uzan]
>>> intelligence = df.all('INTELLIGENT')
>>> print intelligence.each(lambda token: token.get('CREATURE', reverse=True)) # Get the creature token most immediately preceding each intelligent token
[CREATURE:DWARF]
[CREATURE:HUMAN]
[CREATURE:ELF]
[CREATURE:GOBLIN]
[CREATURE:FAIRY]
[CREATURE:PIXIE]

---

queryable.get

>>> print df.get(exact_value='TRANSLATION', exact_args=['HUMAN'])
[TRANSLATION:HUMAN]
>>> print df.get(value_in=('EXAMPLE', 'ALSO_NOT_A_REAL_TOKEN', 'PICKED_COLOR'), exact_args=['6', '0', '1'])
[PICKED_COLOR:6:0:1]
>>> bear = df.get(match_token=raws.token('CREATURE:BEAR_GRIZZLY'))
>>> print bear
[CREATURE:BEAR_GRIZZLY]
>>> print bear.get(exact_value='DESCRIPTION')
[DESCRIPTION:A huge brown creature found in temperate woodland.  It is known for its ferocious attack, usually when it or its young are threatened.]
>>> print bear.get(exact_value='CREATURE')
[CREATURE:BEAR_BLACK]

---

queryable.list
queryableobj.getobj queryable.get token.__getitem__ token.add
>>> forest = df.getobj('ENTITY:FOREST')
>>> print forest.list(range=5, include_self=True)
[ENTITY:FOREST]
    [CREATURE:ELF]
    [TRANSLATION:ELF]
    [WEAPON:ITEM_WEAPON_SWORD_SHORT]
    [WEAPON:ITEM_WEAPON_SPEAR]
>>> sword = forest.get('WEAPON:ITEM_WEAPON_SWORD_SHORT')
>>> sword.remove()
>>> print forest.list(range=5, include_self=True)
[ENTITY:FOREST]
    [CREATURE:ELF]
    [TRANSLATION:ELF]
    [WEAPON:ITEM_WEAPON_SPEAR]
    [WEAPON:ITEM_WEAPON_BOW]
>>> added = forest[2].add(sword)
>>> print forest.list(range=5, include_self=True)
[ENTITY:FOREST]
    [CREATURE:ELF]
    [TRANSLATION:ELF]
    [WEAPON:ITEM_WEAPON_SWORD_SHORT]
    [WEAPON:ITEM_WEAPON_SPEAR]
